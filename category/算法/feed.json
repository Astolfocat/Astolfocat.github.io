{
    "version": "https://jsonfeed.org/version/1",
    "title": "阿福の可爱猫窝 • All posts by \"算法\" category",
    "description": "一只想要变可爱的男孩纸~",
    "home_page_url": "https://astolfocat.github.io",
    "items": [
        {
            "id": "https://astolfocat.github.io/MyCategories/note/Algorithm/%E9%80%92%E6%8E%A8%E4%B8%8E%E5%89%8D%E7%BC%80%E5%92%8C/",
            "url": "https://astolfocat.github.io/MyCategories/note/Algorithm/%E9%80%92%E6%8E%A8%E4%B8%8E%E5%89%8D%E7%BC%80%E5%92%8C/",
            "title": "[算法] 递推与前缀和",
            "date_published": "2021-11-05T16:00:00.000Z",
            "content_html": "<h2 id=\"算法概述\"><a href=\"#算法概述\" class=\"headerlink\" title=\"算法概述\"></a>算法概述</h2><h3 id=\"递推的定义\"><a href=\"#递推的定义\" class=\"headerlink\" title=\"递推的定义\"></a>递推的定义</h3><h4 id=\"递推\"><a href=\"#递推\" class=\"headerlink\" title=\"递推\"></a>递推</h4><p>通过计算前面的一些项得出序列中指定项的值。  </p>\n<ul>\n<li>斐波拉契数列</li>\n<li>卡特兰数</li>\n</ul>\n<h4 id=\"前缀和\"><a href=\"#前缀和\" class=\"headerlink\" title=\"前缀和\"></a>前缀和</h4><p>是一种重要的预处理，，能大大降低查询的时间复杂度，可理解为数列的前n项和  </p>\n<p>C++中有前缀和的标准库</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br><span class=\"line\">std::partial_sum</span><br></pre></td></tr></table></figure>\n<h4 id=\"差分数组\"><a href=\"#差分数组\" class=\"headerlink\" title=\"差分数组\"></a>差分数组</h4><p>差分是一种和前缀相对的策略，可以当作是求和的逆运算。</p>\n<ul>\n<li><p>定义：<br>$a_n=b_n-b_{n-1}$<br>$a_1=b_1$</p>\n</li>\n<li><p>性质：</p>\n<blockquote>\n<ol>\n<li> $a_i$ 的值是 $b_i$ 的前缀和，即$a_n=\\sum_{i=1}^n\\text{b}_i$  </li>\n<li> 计算 $a_i$ 的前缀和：<br>sum = $\\sum_{i=1}^na_i = \\sum_{i=1}^n\\sum_{j=1}^ib_j = \\sum_i^n(n-i+1)b_i$  </li>\n</ol>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"递推部分\"><a href=\"#递推部分\" class=\"headerlink\" title=\"递推部分\"></a>递推部分</h2><p>(例题)  </p>\n<h2 id=\"前缀和部分\"><a href=\"#前缀和部分\" class=\"headerlink\" title=\"前缀和部分\"></a>前缀和部分</h2><h3 id=\"一维差分数组\"><a href=\"#一维差分数组\" class=\"headerlink\" title=\"一维差分数组\"></a>一维差分数组</h3><ul>\n<li>dif[i] = a[i] - a[i-1]</li>\n</ul>\n<h3 id=\"二维差分数组\"><a href=\"#二维差分数组\" class=\"headerlink\" title=\"二维差分数组\"></a>二维差分数组</h3><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><ul>\n<li>dif[i][j] = a[i][j] - a[i-1][j] - a[i][j-1] + a[i-1][j-1]</li>\n</ul>\n<h4 id=\"前缀和定义：\"><a href=\"#前缀和定义：\" class=\"headerlink\" title=\"前缀和定义：\"></a>前缀和定义：</h4><ul>\n<li>pre[i][j] = $\\sum_{x=1}^{x_i}\\sum_{y=1}^{y_j}a[i][j]$  </li>\n</ul>\n<h4 id=\"求前缀和：\"><a href=\"#求前缀和：\" class=\"headerlink\" title=\"求前缀和：\"></a>求前缀和：</h4><ul>\n<li>pre[i][j] = pre[i-1][j] + pre[i][j-1] - pre[i-1][j-1] + a[i][j]  </li>\n</ul>\n<h2 id=\"算法扩展\"><a href=\"#算法扩展\" class=\"headerlink\" title=\"算法扩展\"></a>算法扩展</h2><h3 id=\"递推的扩展\"><a href=\"#递推的扩展\" class=\"headerlink\" title=\"递推的扩展\"></a>递推的扩展</h3><h4 id=\"二阶线性递推式\"><a href=\"#二阶线性递推式\" class=\"headerlink\" title=\"二阶线性递推式\"></a>二阶线性递推式</h4><h4 id=\"OEIS\"><a href=\"#OEIS\" class=\"headerlink\" title=\"OEIS\"></a>OEIS</h4><h4 id=\"数论\"><a href=\"#数论\" class=\"headerlink\" title=\"数论\"></a>数论</h4><h3 id=\"前缀和的扩展\"><a href=\"#前缀和的扩展\" class=\"headerlink\" title=\"前缀和的扩展\"></a>前缀和的扩展</h3><h4 id=\"多维前缀和\"><a href=\"#多维前缀和\" class=\"headerlink\" title=\"多维前缀和\"></a>多维前缀和</h4><h4 id=\"树上差分\"><a href=\"#树上差分\" class=\"headerlink\" title=\"树上差分\"></a>树上差分</h4><h4 id=\"边差分\"><a href=\"#边差分\" class=\"headerlink\" title=\"边差分\"></a>边差分</h4>",
            "tags": [
                "算法~",
                "笔记~"
            ]
        },
        {
            "id": "https://astolfocat.github.io/MyCategories/note/Algorithm/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/",
            "url": "https://astolfocat.github.io/MyCategories/note/Algorithm/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/",
            "title": "[算法] 贪心算法",
            "date_published": "2021-11-03T16:00:00.000Z",
            "content_html": "<h2 id=\"贪心算法简介\"><a href=\"#贪心算法简介\" class=\"headerlink\" title=\"贪心算法简介\"></a>贪心算法简介</h2><h3 id=\"贪心算法基本思想\"><a href=\"#贪心算法基本思想\" class=\"headerlink\" title=\"贪心算法基本思想\"></a>贪心算法基本思想</h3><ul>\n<li>每一步都做出当前看来最好的选择  </li>\n<li>希望通过局部最优选择达到全局最优选择</li>\n<li>不一定总产生最优解</li>\n</ul>\n<h3 id=\"贪心算法产生最优解的条件\"><a href=\"#贪心算法产生最优解的条件\" class=\"headerlink\" title=\"贪心算法产生最优解的条件\"></a>贪心算法产生最优解的条件</h3><ul>\n<li>最优子结构</li>\n<li>贪心选择性</li>\n</ul>\n",
            "tags": [
                "算法~",
                "笔记~"
            ]
        }
    ]
}